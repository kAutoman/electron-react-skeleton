#!/usr/bin/env node

'use strict'

const path = require('path')
const chalk = require('chalk')
const child_process = require('child_process')
const fs = require('fs-extra')
const packager = require('electron-packager')
const distInfo = require('./dist-info')
const packageInfo = require('../app/package-info')

// package information
const appPackage = require(path.join(distInfo.getProjectRoot(), 'package.json'))

// start building process
console.log(
  chalk`{yellow [BUILD]} Building for {magenta '${distInfo.getAppEnvironment()}'}`
)

// cleanup
console.log(chalk`{yellow [BUILD]} Removing old distribution files...`)
fs.removeSync(distInfo.getDistRoot())

// copy dependencies
console.log(chalk`{yellow [BUILD]} Copying dependencies...`)
copyDependencies()

// copy static resources
console.log(chalk`{yellow [BUILD]} Copying static resources...`)
copyStaticResources()

// packaging application
console.log(chalk`{yellow [BUILD]} Packaging application...`)
packageApplication()

function copyDependencies() {
  const appDeps = appPackage.dependencies
  const newDeps = {}
  const appDevDeps = appPackage.devDependencies
  const newDevDeps = {}

  const webpackBase = require(path.join(
    distInfo.getProjectRoot(),
    'webpack',
    'webpack.base'
  ))

  const externals = webpackBase.externals

  if (distInfo.isDevelopment()) {
    externals.push('devtron')
  }

  for (const name of Object.keys(appDeps)) {
    const pkg = appDeps[name]
    if (externals.indexOf(name) !== -1) {
      newDeps[name] = pkg
    }
  }

  for (const name of Object.keys(appDevDeps)) {
    const pkg = appDevDeps[name]
    if (externals.indexOf(name) !== -1) {
      newDevDeps[name] = pkg
    }
  }

  const newPackage = Object.assign({}, appPackage, {
    productName: appPackage.build.productName,
    dependencies: newDeps,
    devDependencies: newDevDeps,
  })

  if (!distInfo.isDevelopment()) {
    delete newPackage.devDependencies
  }

  fs.writeFileSync(
    path.join(distInfo.getBuildRoot(), 'package.json'),
    JSON.stringify(newPackage)
  )

  fs.removeSync(path.resolve(distInfo.getBuildRoot(), 'node_modules'))

  if (Object.keys(newDeps).length || Object.keys(newDevDeps).length) {
    console.log(chalk`{yellow [YARN]} Installing dependencies via yarn...`)
    child_process.execSync('yarn install', {
      cwd: distInfo.getBuildRoot(),
      env: process.env,
    })
  }

  if (distInfo.isDevelopment()) {
    console.log(chalk`{yellow [BUILD]} Installing 7zip...`)
    const s7zipSrc = path.resolve(
      distInfo.getProjectRoot(),
      'node_modules/7zip'
    )
    const s7zipDest = path.resolve(distInfo.getBuildRoot(), 'node_modules/7zip')

    fs.mkdirpSync(s7zipDest)
    fs.copySync(s7zipSrc, s7zipDest)
  }
}

function copyStaticResources() {
  const platformDir = path.join(
    distInfo.getProjectRoot(),
    'app',
    'static',
    distInfo.getAppPlatform()
  )
  const destDir = path.join(distInfo.getBuildRoot(), 'static')

  fs.removeSync(destDir)

  if (fs.existsSync(platformDir)) {
    fs.copySync(platformDir, destDir)
  }
}

function packageApplication() {
  const pkgOptions = {
    name: packageInfo.getProductName(),
    platform: distInfo.getAppPlatform(),
    arch: 'x64',
    asar: false,
    out: distInfo.getDistRoot(),
    dir: distInfo.getBuildRoot(),
    tmpdir: false,
    derefSymlinks: false,
    prune: false,
    icon: path.join(
      distInfo.getProjectRoot(),
      'app',
      'static',
      'icons',
      'logo'
    ),
    ignore: [
      new RegExp('/node_modules/\\.bin($|/)'),
      new RegExp('/node_modules/electron($|/)'),
      new RegExp('/node_modules/electron-packager($|/)'),
      new RegExp('/\\.git($|/)'),
    ],

    // MacOS specific
    appCopyright: `Copyright ${packageInfo.getCompanyName()}`,
    appBundleId: packageInfo.getBundleId(),
    appCategoryType: 'public.app-category.business',
    osxSign: false,

    // Windows specific
    win32metadata: {
      CompanyName: packageInfo.getCompanyName(),
      FileDescription: '',
      OriginalFilename: '',
      ProductName: packageInfo.getProductName(),
      InternalName: packageInfo.getProductName(),
    },
  }

  packager(pkgOptions)
    .then(paths => {
      console.log(chalk`{green [BUILD] Successfully built to ${paths}}`)
    })
    .catch(error => {
      console.error(chalk`{red [BUILD] Failed with error ${error}}`)
      process.exit(1)
    })
}
